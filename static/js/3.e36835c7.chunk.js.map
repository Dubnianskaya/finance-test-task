{"version":3,"sources":["pages/RegisterPage.js","components/Form/Form.styled.js","functions/formikFunctions.js","components/Form/Form.js"],"names":["RegisterPage","dispatch","useDispatch","navigate","useNavigate","onFormSubmit","data","authOperations","register","unwrap","then","catch","error","toast","title","buttonText","FormStyled","styled","Form","FormTitle","h1","mediaTablet","TextFieldStyled","TextField","MyTextInput","label","props","useField","field","meta","id","name","variant","color","helperText","touched","AuthForm","Container","initialValues","email","password","validationSchema","Yup","required","matches","emailRegExp","min","onSubmit","values","type","Button","size"],"mappings":"kGAAA,0HAOO,SAASA,IACZ,IAAMC,EAAWC,cACXC,EAAWC,cAcjB,OACI,cAAC,IAAD,UACA,cAAC,IAAD,CAAUC,aAdQ,SAACC,GACnBL,EAASM,IAAeC,SAASF,IAAOG,SACvCC,MAAK,WACFP,EAAS,aAEZQ,OAAM,SAAAC,GACL,GAAIA,EACF,OAAOC,IAAMD,MAAN,2BAO2BE,MAAO,WAAYC,WAAY,iB,iKCpBhEC,EAAaC,YAAOC,IAAPD,CAAH,iGAMVE,EAAYF,IAAOG,GAAV,2HAKlBC,YAAY,4EAOHC,EAAkBL,YAAOM,IAAPN,CAAH,sZAGxBI,YAAY,gCAWVA,YAAY,6B,OClCLG,EAAc,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAUC,EAAY,yBAClD,EAAsBC,YAASD,GAA/B,mBAAOE,EAAP,KAAcC,EAAd,KAEA,OACE,mCACE,cAACP,EAAD,qCACEQ,GAAIJ,EAAMK,MACNH,GACAF,GAHN,IAIED,MAAOA,EACPO,QAAQ,WACRC,MAAM,UACNC,WACEL,EAAKM,SAAWN,EAAKjB,MAAQiB,EAAKjB,MAAQ,W,gBCP7C,SAASwB,EAAT,GAAsD,IAAnC/B,EAAkC,EAAlCA,aAAcS,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,WAE7C,OACE,eAACsB,EAAA,EAAD,WACA,cAAClB,EAAD,UAAYL,IACZ,cAAC,IAAD,CACEwB,cAAe,CACbC,MAAO,GACPC,SAAU,IAEZC,iBAAkBC,IAAW,CAC3BH,MAAOG,MACNH,MAAM,eACNI,SAAS,qBACTC,QACCC,IACA,qCAEFL,SAAUE,MACPI,IAAI,EAAG,wCAEZC,SAAU,SAAAC,GACR3C,EAAa2C,IAjBjB,SAoBK,WACF,OACC,eAAChC,EAAD,WACQ,cAAC,EAAD,CACES,MAAM,QACNM,KAAK,QACLkB,KAAK,SAEP,cAAC,EAAD,CACExB,MAAM,WACNM,KAAK,WACLkB,KAAK,SAEX,cAACC,EAAA,EAAD,CAAQD,KAAK,SAASjB,QAAQ,YAAYmB,KAAK,QAA/C,SAAwDpC","file":"static/js/3.e36835c7.chunk.js","sourcesContent":["import { useDispatch } from \"react-redux\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { authOperations } from '../redux/auth';\r\nimport { AuthForm } from '../components/Form';\r\nimport { AuthPages } from '../components/Container/Container.styled';\r\n\r\nexport function RegisterPage () {\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n     const handleSubmit = (data) => {\r\n        dispatch(authOperations.register(data)).unwrap()\r\n        .then(() => {\r\n            navigate('/login');\r\n          })\r\n        .catch(error => {\r\n          if (error) {\r\n            return toast.error(`Mail already in use`);\r\n          } \r\n        });\r\n    };\r\n\r\n    return (\r\n        <AuthPages>\r\n        <AuthForm onFormSubmit={handleSubmit} title={\"REGISTER\"} buttonText={\"Register\"}/>\r\n        </AuthPages>\r\n    )\r\n}","import styled from \"@emotion/styled\";\r\nimport TextField from '@mui/material/TextField';\r\nimport { Form } from 'formik';\r\nimport { mediaTablet } from '../../functions/media';\r\n\r\nexport const FormStyled = styled(Form)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nexport const FormTitle = styled.h1`\r\n  font-size: 26px;\r\n  line-height: 26px;\r\n  margin-bottom: 24px;\r\n  text-align: center;\r\n  ${mediaTablet(\r\n    ` font-size: 34px;\r\n      line-height: 41px;\r\n      margin-bottom: 32px;`\r\n  )}\r\n`;\r\n\r\nexport const TextFieldStyled = styled(TextField)`\r\n  display: block;\r\n  margin-bottom: 16px;\r\n  ${mediaTablet(` \r\n  margin-bottom: 20px;\r\n `)}\r\n  label {\r\n    font-weight: 700;\r\n    font-size: 14px;\r\n    line-height: 17px;\r\n    letter-spacing: 0.04em;\r\n  }\r\n  input {\r\n    width: 280px;\r\n    ${mediaTablet(` \r\n     width: 320px;\r\n `)}\r\n    position: relative;\r\n    // border-bottom: 1px solid #e0e0e0;\r\n    padding-bottom: 7px;\r\n  }\r\n  p {\r\n    position: absolute;\r\n    margin-top: 0;\r\n    color: #f0000f;\r\n  }\r\n`;","import { useField } from 'formik';\r\nimport { TextFieldStyled } from '../components/Form/Form.styled';\r\n\r\nexport const MyTextInput = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n\r\n  return (\r\n    <>\r\n      <TextFieldStyled\r\n        id={props.name}\r\n        {...field}\r\n        {...props}\r\n        label={label}\r\n        variant=\"standard\"\r\n        color=\"primary\"\r\n        helperText={\r\n          meta.touched && meta.error ? meta.error : null\r\n        }\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\n","import PropTypes from 'prop-types';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Button from '@mui/material/Button';\r\nimport { MyTextInput } from '../../functions/formikFunctions';\r\nimport { FormStyled, FormTitle } from './Form.styled';\r\nimport { Container } from '../Container';\r\nimport { emailRegExp } from '../../libs/constants';\r\n\r\nexport function AuthForm({onFormSubmit, title, buttonText}) {\r\n\r\n  return (\r\n    <Container>\r\n    <FormTitle>{title}</FormTitle>\r\n    <Formik\r\n      initialValues={{\r\n        email: '',\r\n        password: '',\r\n      }}\r\n      validationSchema={Yup.object({\r\n        email: Yup.string()\r\n        .email('Wrong email')\r\n        .required('Email is required')\r\n        .matches(\r\n          emailRegExp,\r\n          'email must be like: name@mail.com'\r\n        ),\r\n        password: Yup.string()\r\n          .min(6, \"Password must be minimum 6 symbols\")\r\n      })}\r\n      onSubmit={values => {\r\n        onFormSubmit(values);\r\n      }}\r\n    >\r\n        {() => {\r\n       return (\r\n        <FormStyled>\r\n                <MyTextInput\r\n                  label=\"Email\"\r\n                  name=\"email\"\r\n                  type=\"text\"\r\n                />\r\n                <MyTextInput\r\n                  label=\"Password\"\r\n                  name=\"password\"\r\n                  type=\"text\"\r\n                />\r\n            <Button type=\"submit\" variant=\"contained\" size=\"large\">{buttonText}</Button>\r\n            </FormStyled>\r\n        );\r\n       }}\r\n    </Formik>\r\n  </Container>\r\n  );\r\n}\r\n\r\nAuthForm.propTypes = {\r\n  onFormSubmit: PropTypes.func.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  buttonText: PropTypes.string.isRequired,\r\n};"],"sourceRoot":""}